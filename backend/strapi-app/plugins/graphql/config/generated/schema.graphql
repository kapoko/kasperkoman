input createGigInput {
  data: GigInput
}

type createGigPayload {
  gig: Gig
}

input createReleaseInput {
  data: ReleaseInput
}

type createReleasePayload {
  release: Release
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteGigInput {
  where: InputID
}

type deleteGigPayload {
  gig: Gig
}

input deleteReleaseInput {
  where: InputID
}

type deleteReleasePayload {
  release: Release
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  square: String
  thumb: String
  provider: String
  public_id: String
  related: [ID]
}

input editGigInput {
  title: String
  date: DateTime
  city: String
  countryCode: String
  url: String
  venue: String
}

input editReleaseInput {
  title: String
  subtitle: String
  releaseDate: DateTime
  label: String
  links: String
  cover: ID
  originalArtist: String
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  square: String!
  thumb: String!
  provider: String!
  public_id: String
  related: [ID]
}

"""Planned gigs with locations and optional ticket links."""
type Gig {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  date: DateTime
  city: String
  countryCode: String
  url: String
  venue: String
}

type GigAggregator {
  count: Int
  totalCount: Int
}

type GigConnection {
  values: [Gig]
  groupBy: GigGroupBy
  aggregate: GigAggregator
}

type GigConnection_id {
  key: ID
  connection: GigConnection
}

type GigConnectionCity {
  key: String
  connection: GigConnection
}

type GigConnectionCountryCode {
  key: String
  connection: GigConnection
}

type GigConnectionCreatedAt {
  key: DateTime
  connection: GigConnection
}

type GigConnectionDate {
  key: DateTime
  connection: GigConnection
}

type GigConnectionId {
  key: ID
  connection: GigConnection
}

type GigConnectionTitle {
  key: String
  connection: GigConnection
}

type GigConnectionUpdatedAt {
  key: DateTime
  connection: GigConnection
}

type GigConnectionUrl {
  key: String
  connection: GigConnection
}

type GigConnectionVenue {
  key: String
  connection: GigConnection
}

type GigGroupBy {
  _id: [GigConnection_id]
  id: [GigConnectionId]
  createdAt: [GigConnectionCreatedAt]
  updatedAt: [GigConnectionUpdatedAt]
  title: [GigConnectionTitle]
  date: [GigConnectionDate]
  city: [GigConnectionCity]
  countryCode: [GigConnectionCountryCode]
  url: [GigConnectionUrl]
  venue: [GigConnectionVenue]
}

input GigInput {
  title: String
  date: DateTime
  city: String
  countryCode: String
  url: String
  venue: String
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Gig | createGigPayload | updateGigPayload | deleteGigPayload | GigConnection | GigAggregator | GigGroupBy | GigConnection_id | GigConnectionId | GigConnectionCreatedAt | GigConnectionUpdatedAt | GigConnectionTitle | GigConnectionDate | GigConnectionCity | GigConnectionCountryCode | GigConnectionUrl | GigConnectionVenue | Release | createReleasePayload | updateReleasePayload | deleteReleasePayload | ReleaseConnection | ReleaseAggregator | ReleaseGroupBy | ReleaseConnection_id | ReleaseConnectionId | ReleaseConnectionCreatedAt | ReleaseConnectionUpdatedAt | ReleaseConnectionTitle | ReleaseConnectionSubtitle | ReleaseConnectionReleaseDate | ReleaseConnectionLabel | ReleaseConnectionLinks | ReleaseConnectionCover | ReleaseConnectionOriginalArtist | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionId | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionSquare | UploadFileConnectionThumb | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createGig(input: createGigInput): createGigPayload
  updateGig(input: updateGigInput): updateGigPayload
  deleteGig(input: deleteGigInput): deleteGigPayload
  createRelease(input: createReleaseInput): createReleasePayload
  updateRelease(input: updateReleaseInput): updateReleasePayload
  deleteRelease(input: deleteReleaseInput): deleteReleasePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  gig(id: ID!): Gig
  gigs(sort: String, limit: Int, start: Int, where: JSON): [Gig]
  gigsConnection(sort: String, limit: Int, start: Int, where: JSON): GigConnection
  release(id: ID!): Release
  releases(sort: String, limit: Int, start: Int, where: JSON): [Release]
  releasesConnection(sort: String, limit: Int, start: Int, where: JSON): ReleaseConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Release {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  subtitle: String
  releaseDate: DateTime
  label: String
  links: String
  cover: UploadFile
  originalArtist: String
}

type ReleaseAggregator {
  count: Int
  totalCount: Int
}

type ReleaseConnection {
  values: [Release]
  groupBy: ReleaseGroupBy
  aggregate: ReleaseAggregator
}

type ReleaseConnection_id {
  key: ID
  connection: ReleaseConnection
}

type ReleaseConnectionCover {
  key: ID
  connection: ReleaseConnection
}

type ReleaseConnectionCreatedAt {
  key: DateTime
  connection: ReleaseConnection
}

type ReleaseConnectionId {
  key: ID
  connection: ReleaseConnection
}

type ReleaseConnectionLabel {
  key: String
  connection: ReleaseConnection
}

type ReleaseConnectionLinks {
  key: String
  connection: ReleaseConnection
}

type ReleaseConnectionOriginalArtist {
  key: String
  connection: ReleaseConnection
}

type ReleaseConnectionReleaseDate {
  key: DateTime
  connection: ReleaseConnection
}

type ReleaseConnectionSubtitle {
  key: String
  connection: ReleaseConnection
}

type ReleaseConnectionTitle {
  key: String
  connection: ReleaseConnection
}

type ReleaseConnectionUpdatedAt {
  key: DateTime
  connection: ReleaseConnection
}

type ReleaseGroupBy {
  _id: [ReleaseConnection_id]
  id: [ReleaseConnectionId]
  createdAt: [ReleaseConnectionCreatedAt]
  updatedAt: [ReleaseConnectionUpdatedAt]
  title: [ReleaseConnectionTitle]
  subtitle: [ReleaseConnectionSubtitle]
  releaseDate: [ReleaseConnectionReleaseDate]
  label: [ReleaseConnectionLabel]
  links: [ReleaseConnectionLinks]
  cover: [ReleaseConnectionCover]
  originalArtist: [ReleaseConnectionOriginalArtist]
}

input ReleaseInput {
  title: String
  subtitle: String
  releaseDate: DateTime
  label: String
  links: String
  cover: ID
  originalArtist: String
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateGigInput {
  where: InputID
  data: editGigInput
}

type updateGigPayload {
  gig: Gig
}

input updateReleaseInput {
  where: InputID
  data: editReleaseInput
}

type updateReleasePayload {
  release: Release
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  square: String!
  thumb: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSquare {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionThumb {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  id: [UploadFileConnectionId]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  square: [UploadFileConnectionSquare]
  thumb: [UploadFileConnectionThumb]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  id: [UsersPermissionsUserConnectionId]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
